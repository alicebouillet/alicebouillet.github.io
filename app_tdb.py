import streamlit as st
import pandas as pd
import uuid
from datetime import datetime
import plotly.express as px
import matplotlib as plt
# --- Chargement ou initialisation des donn√©es ---
lien_excel = "Gestion de projet - Manifestations.xlsx"
lien_sauvegarde = "Gestion de projet - Manifestations.xlsx"

if "df" not in st.session_state:
    try:
        st.session_state.df = pd.read_excel(lien_excel)
    except FileNotFoundError:
        st.session_state.df = pd.DataFrame(columns=[
            "ID de t√¢che", "Nom de t√¢che", "Progression", "Pourcentage", "Priorit√©","Nom du compartiment" "Attribu√© √†",
            "Date de d√©but", "Date de fin", "Etiquettes", "Description", "Budget pr√©vu", "Budget utilis√©"
        ])

df = st.session_state.df
df["Description"] = df["Description"].astype(str)
df["Attribu√© √†"] = df["Attribu√© √†"].astype(str)
df["Etiquettes"] = df["Etiquettes"].astype(str)
for col in ["Date de d√©but", "Date de fin"]:
    if col in df.columns:
        df[col] = pd.to_datetime(df[col], errors='coerce')
# --- Sidebar navigation ---
st.sidebar.title("Navigation")
onglet = st.sidebar.radio("Aller √† :", [
    "üìä Tableau de bord", "üìù T√¢ches restantes", "üìã Liste compl√®te",
    "‚ûï Ajouter une t√¢che", "‚úèÔ∏è Modifier une t√¢che","üóëÔ∏è Supprimer une t√¢che", "üí∞ Budget","üë• Mes t√¢ches"
])

# --- Onglet 1 : Tableau de bord principal ---
if onglet == "üìä Tableau de bord":
    st.title("üìä Tableau de bord")
        # Histogramme du nombre de t√¢ches par compartiment
    fig1 = px.histogram(df, x="Attribu√© √†", color="Progression", barmode="group",
                        title="R√©partition des t√¢ches par compartiment et progression",
                        labels={"Nom du compartiment": "Compartiment", "Progression": "Statut des t√¢ches"})
    st.plotly_chart(fig1, use_container_width=True)

    # Diagramme en barres empil√©es : Nombre de t√¢ches par compartiment et statut de progression
    progression_compartiment = df.groupby(["Nom du compartiment", "Progression"]).size().reset_index(name="Nombre de t√¢ches")
    fig2 = px.bar(progression_compartiment, x="Nom du compartiment", y="Nombre de t√¢ches",
                  color="Progression", title="Nombre de t√¢ches par compartiment et progression",
                  labels={"Nom du compartiment": "Compartiment", "Nombre de t√¢ches": "Nombre de t√¢ches"})
    st.plotly_chart(fig2, use_container_width=True)

    # Camembert : R√©partition globale des t√¢ches par statut de progression
    statut_counts = df["Progression"].value_counts().reset_index()
    statut_counts.columns = ["Statut", "Nombre de t√¢ches"]
    fig3 = px.pie(statut_counts, values="Nombre de t√¢ches", names="Statut",
                  title="R√©partition des t√¢ches selon le statut",
                  color_discrete_sequence=px.colors.sequential.RdBu)
    st.plotly_chart(fig3, use_container_width=True)
    for index, row in df.iterrows():
        # Afficher le nom de la t√¢che
        st.markdown(f"**{row['Nom de t√¢che']}**")

        # Convertir le pourcentage en entier
        progress_percent = int(row["Pourcentage"])

        # Afficher la barre de progression
        st.progress(progress_percent)
        #Affichage descriptions
        st.markdown(f"{row['Description']}")
        #Affichage du  valideur
        st.markdown(f"Valideur : {row['Valideur']}")




# --- Onglet 2 : T√¢ches restantes ---
elif onglet == "üìù T√¢ches restantes":
    st.title("üìù T√¢ches √† faire")
    restantes = df[df["Progression"] != "Termin√©es"]
    st.dataframe(restantes)

# --- Onglet 3 : Liste compl√®te ---
elif onglet == "üìã Liste compl√®te":
    st.title("üìã Toutes les t√¢ches")
    st.dataframe(df)

# --- Onglet 4 : Ajouter une t√¢che ---
elif onglet == "‚ûï Ajouter une t√¢che":
    st.title("‚ûï Ajouter une nouvelle t√¢che")

    with st.form("form_ajout"):
        nom = st.text_input("Nom de la t√¢che")
        description = st.text_area("Description")
        valideur = st.text_input("Nom du valideur")
        progression = st.selectbox("Progression", ["Non d√©marr√©es", "En cours", "Termin√©es"])
        pourcentage = st.slider("Pourcentage", 0, 100, 0)
        priorite = st.selectbox("Priorit√©", ["Faible", "Moyen", "√âlev√©e"])
        compartiment = st.text_input("Nom du compartiment")
        assignee = st.text_input("Attribu√© √†", "Alice Bouillet")
        date_debut = st.date_input("Date de d√©but", datetime.today())
        date_fin = st.date_input("Date de fin", datetime.today())
        etiquettes = st.text_input("√âtiquettes (s√©par√©es par des virgules)")
        budget_prevu = st.number_input("Budget pr√©vu (‚Ç¨)", min_value=0.0, value=0.0)
        budget_utilise = st.number_input("Budget utilis√© (‚Ç¨)", min_value=0.0, value=0.0)
        inclus = st.text_input("Inclus dans budget (ex : repas, transport...)")
        prise_en_charge = st.text_input("Pris en charge par (ex : BDE, partenaires...)")

        submitted = st.form_submit_button("Ajouter")
        if submitted:
            nouvelle_tache = {
                "ID de t√¢che": str(uuid.uuid4()),
                "Nom de t√¢che": nom,
                "Description": str(description),
                "Progression": progression,
                "Pourcentage": pourcentage,
                "Priorit√©": priorite,
                "Valideur" : valideur, 
                "Nom du compartiment" : compartiment,
                "Attribu√© √†": assignee,
                "Date de d√©but": date_debut,
                "Date de fin": date_fin,
                "Etiquettes": etiquettes,
                "Budget pr√©vu": budget_prevu,
                "Budget utilis√©": budget_utilise,
                "Inclus dans budget": inclus,
                "Pris en charge par": prise_en_charge
            }
            st.session_state.df = st.session_state.df.append(nouvelle_tache, ignore_index=True)
            st.success("‚úÖ T√¢che ajout√©e avec succ√®s.")

# --- Onglet 5 : Modifier une t√¢che ---
elif onglet == "‚úèÔ∏è Modifier une t√¢che":
    st.title("‚úèÔ∏è Modifier une t√¢che existante")

    if df.empty:
        st.info("Aucune t√¢che √† modifier.")
    else:
        noms_taches = df["Nom de t√¢che"].tolist()
        selection = st.selectbox("S√©lectionnez une t√¢che :", noms_taches)
        tache_index = df[df["Nom de t√¢che"] == selection].index[0]
        tache = df.loc[tache_index]

        # Fonction pour s√©curiser les dates
        def convertir_date(val):
            if pd.isnull(val):
                return datetime.today().date()
            return pd.to_datetime(val).date()

        with st.form("form_modif"):
            nom = st.text_input("Nom de la t√¢che", tache["Nom de t√¢che"])
            description = st.text_area("Description", tache["Description"])
            valideur = st.text_input("Nom du valideur", tache["Valideur"])
            progression = st.selectbox("Progression", ["Non d√©marr√©es", "En cours", "Termin√©es"],
                                       index=["Non d√©marr√©es", "En cours", "Termin√©es"].index(str(tache["Progression"])))
            pourcentage = st.slider("Pourcentage", 0, 100, int(tache["Pourcentage"]))
            priorite = st.selectbox("Priorit√©", ["Faible", "Moyen", "√âlev√©e"],
                                    index=["Faible", "Moyen", "√âlev√©e"].index(str(tache["Priorit√©"])))
            compartiment = st.text_input("Nom du compartiment", tache["Nom du compartiment"])
            assignee = st.text_input("Attribu√© √†", tache["Attribu√© √†"])

            date_debut = st.date_input("Date de d√©but", convertir_date(tache["Date de d√©but"]))
            date_fin = st.date_input("Date de fin", convertir_date(tache["Date de fin"]))
            etiquettes = st.text_input("√âtiquettes", tache["√âtiquettes"])
            budget_prevu = st.number_input("Budget pr√©vu (‚Ç¨)", min_value=0.0, value=float(tache["Budget pr√©vu"]))
            budget_utilise = st.number_input("Budget utilis√© (‚Ç¨)", min_value=0.0, value=float(tache["Budget utilis√©"]))
            inclus = st.text_input("Inclus dans budget", tache.get("Inclus dans budget", ""))
            prise_en_charge = st.text_input("Pris en charge par", tache.get("Pris en charge par", ""))
            modif = st.form_submit_button("üíæ Enregistrer les modifications")
            if modif:
                df.at[tache_index, "Nom de t√¢che"] = nom
                df.at[tache_index, "Description"] = str(description)
                df.at[tache_index, "Valideur"] = str(valideur)
                df.at[tache_index, "Progression"] = progression
                df.at[tache_index, "Pourcentage"] = pourcentage
                df.at[tache_index, "Priorit√©"] = priorite
                df.at[tache_index, "Nom du compartiment"] = compartiment
                df.at[tache_index, "Attribu√© √†"] = assignee
                df.at[tache_index, "Date de d√©but"] = date_debut
                df.at[tache_index, "Date de fin"] = date_fin
                df.at[tache_index, "Etiquettes"] = etiquettes
                df.at[tache_index, "Budget pr√©vu"] = budget_prevu
                df.at[tache_index, "Budget utilis√©"] = budget_utilise
                df.at[tache_index, "Inclus dans budget"] = inclus
                df.at[tache_index, "Pris en charge par"] = prise_en_charge
                st.success("‚úÖ T√¢che modifi√©e avec succ√®s.")

# --- Onglet 6 : Suppression d'une t√¢che ---

elif onglet == "üóëÔ∏è Supprimer une t√¢che":
    st.title("üóëÔ∏è Supprimer une t√¢che")

    # V√©rifier si des t√¢ches sont pr√©sentes
    if df.empty:
        st.info("Aucune t√¢che √† supprimer.")
    else:
        # S√©lectionner une t√¢che √† supprimer
        tache_a_supprimer = st.selectbox("S√©lectionne la t√¢che √† supprimer :", df["Nom de t√¢che"])

        # Ajouter un bouton de suppression
        if st.button(f"Supprimer la t√¢che : {tache_a_supprimer}"):
            # Supprimer la t√¢che de la DataFrame
            df = df[df["Nom de t√¢che"] != tache_a_supprimer]
            st.session_state.df = df  # Mettre √† jour la session avec les nouvelles donn√©es
            # Sauvegarder la DataFrame mise √† jour dans le fichier
            df.to_csv(lien_sauvegarde, index=False)  # Sauvegarde des modifications
            st.success(f"T√¢che '{tache_a_supprimer}' supprim√©e avec succ√®s!")

        # Afficher la liste mise √† jour apr√®s suppression
        st.write("T√¢ches restantes apr√®s suppression :")
        st.dataframe(df)

# --- Onglet 7 : Suivi du budget ---
elif onglet == "üí∞ Budget":
    st.title("üí∞ Suivi du budget")

    if "Budget pr√©vu" in df.columns and "Budget utilis√©" in df.columns:
        # R√©sum√© des montants
        total_prevu = df["Budget pr√©vu"].sum()
        total_utilise = df["Budget utilis√©"].sum()
        ecart = total_prevu - total_utilise

        col1, col2, col3 = st.columns(3)
        col1.metric("üíº Budget pr√©vu total", f"{total_prevu:.2f} ‚Ç¨")
        col2.metric("üí∏ Budget utilis√© total", f"{total_utilise:.2f} ‚Ç¨")
        col3.metric("üìâ √âcart restant", f"{ecart:.2f} ‚Ç¨", delta=f"{-ecart:.2f} ‚Ç¨" if ecart < 0 else f"+{ecart:.2f} ‚Ç¨")

        st.markdown("---")

        # Diagramme comparatif par t√¢che
        fig1 = px.bar(df, x="Nom de t√¢che", y=["Budget pr√©vu", "Budget utilis√©"],
                     barmode="group", title="üìä Budget pr√©vu vs utilis√© par t√¢che")
        st.plotly_chart(fig1, use_container_width=True)

        # R√©partition du budget pr√©vu par poste (si dispo)
        if "Inclus dans budget" in df.columns:
            repartition = df.groupby("Inclus dans budget")[["Budget pr√©vu"]].sum().reset_index()
            fig2 = px.pie(repartition, values="Budget pr√©vu", names="Inclus dans budget",
                          title="R√©partition du budget pr√©vu par poste")
            st.plotly_chart(fig2, use_container_width=True)

        st.markdown("---")

        # Filtre par "Pris en charge par"
        if "Pris en charge par" in df.columns:
            options = ["Tous"] + sorted(df["Pris en charge par"].dropna().unique())
            choix_responsable = st.selectbox("Filtrer par responsable du financement :", options)

            if choix_responsable != "Tous":
                df_filtre = df[df["Pris en charge par"] == choix_responsable]
            else:
                df_filtre = df

            st.dataframe(df_filtre[["Nom de t√¢che", "Budget pr√©vu", "Budget utilis√©", "Inclus dans budget", "Pris en charge par"]])

    else:
        st.warning("‚ùó Colonnes de budget manquantes dans le fichier.")
# --- Onglet 8: T√¢ches par personne ---
elif onglet == "üë• Mes t√¢ches":
    st.title("üë• Mes t√¢ches")

    # Extraire tous les noms uniques depuis la colonne "Attribu√© √†"
    noms_uniques = set()
    for val in df["Attribu√© √†"].dropna():
        for nom in str(val).split("/"):
            noms_uniques.add(nom.strip())

    personne = st.selectbox("S√©lectionnez une personne :", sorted(noms_uniques))

    # Filtrer les t√¢ches o√π cette personne est impliqu√©e
    df_filtr√© = df[df["Attribu√© √†"].str.contains(personne, na=False, case=False)]

    # R√©sum√©
    total = len(df_filtr√©)
    nb_non_demarre = (df_filtr√©["Progression"] == "Non d√©marr√©es").sum()
    nb_en_cours = (df_filtr√©["Progression"] == "En cours").sum()
    nb_termine = (df_filtr√©["Progression"] == "Termin√©es").sum()

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("T√¢ches totales", total)
    col2.metric("Non d√©marr√©es", nb_non_demarre)
    col3.metric("En cours", nb_en_cours)
    col4.metric("Termin√©es", nb_termine)

    # Graphique circulaire
    statuts = df_filtr√©["Progression"].value_counts().reset_index()
    statuts.columns = ["Statut", "Nombre"]
    if not statuts.empty:
        fig = px.pie(statuts, names="Statut", values="Nombre",
                     title=f"R√©partition des t√¢ches pour {personne}",
                     color_discrete_sequence=px.colors.sequential.Plasma)
        st.plotly_chart(fig, use_container_width=True)

    # T√¢ches √† faire
    st.subheader("üìå T√¢ches √† faire")
    df_a_faire = df_filtr√©[df_filtr√©["Progression"].isin(["Non d√©marr√©es", "En cours"])]
    if not df_a_faire.empty:
        for idx, row in df_a_faire.iterrows():
            st.markdown(f"**{row['Nom de t√¢che']}**", unsafe_allow_html=False)
            st.progress(int(row["Pourcentage"]))
            if pd.notna(row["Description"]):
                st.markdown(f"_{row['Description']}_")
    else:
        st.info("Aucune t√¢che en cours ou non d√©marr√©e pour cette personne.")


st.sidebar.markdown("---")
if st.sidebar.button("üíæ Sauvegarder les modifications"):
    try:
        # Sauvegarde dans le fichier Excel
        df.to_excel(lien_sauvegarde, index=False)

        st.sidebar.success(f"Fichier enregistr√© dans : `{lien_sauvegarde}`")
    except Exception as e:
        st.sidebar.error(f"Erreur lors de l'enregistrement : {e}")
